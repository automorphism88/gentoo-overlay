# Patch taken from https://github.com/PeeJay/bees/commit/f3d1926d6718e794a6b52066e40a1118f82d51df
# From f3d1926d6718e794a6b52066e40a1118f82d51df Mon Sep 17 00:00:00 2001
From: Paul Jones <paul@pauljones.id.au>
Date: Sun, 24 Feb 2019 19:58:25 +1100
Subject: [PATCH] Swap from crc64 to xxhash64

Signed-off-by: Paul Jones <paul@pauljones.id.au>
---
 lib/crc64.cc  | 99 +++------------------------------------------------
 makeflags     |  2 +-
 src/Makefile  |  2 +-
 test/Makefile |  2 +-
 test/crc64.cc | 12 +++----
 5 files changed, 14 insertions(+), 103 deletions(-)

diff --git a/lib/crc64.cc b/lib/crc64.cc
index 7eb5445a..7f07ebe4 100644
--- a/lib/crc64.cc
+++ b/lib/crc64.cc
@@ -1,105 +1,16 @@
-/* crc64.c -- compute CRC-64
- * Copyright (C) 2013 Mark Adler
- * Version 1.4  16 Dec 2013  Mark Adler
- */
-
-/*
- This software is provided 'as-is', without any express or implied
- warranty.  In no event will the author be held liable for any damages
- arising from the use of this software.
-
- Permission is granted to anyone to use this software for any purpose,
- including commercial applications, and to alter it and redistribute it
- freely, subject to the following restrictions:
-
- 1. The origin of this software must not be misrepresented; you must not
- claim that you wrote the original software. If you use this software
- in a product, an acknowledgment in the product documentation would be
- appreciated but is not required.
- 2. Altered source versions must be plainly marked as such, and must not be
- misrepresented as being the original software.
- 3. This notice may not be removed or altered from any source distribution.
-
- Mark Adler
- madler@alumni.caltech.edu
- */
-
-/* Substantially modified by Paul Jones for usage in bees */
-
 #include "crucible/crc64.h"
 
-#define POLY64REV 0xd800000000000000ULL
+extern "C"
+{
+#include <xxhash.h>
+}
 
 namespace crucible {
 
-	static bool init = false;
-	static uint64_t CRCTable[8][256];
-
-	static void init_crc64_table()
-	{
-		if (!init) {
-			uint64_t crc;
-
-			// Generate CRCs for all single byte sequences
-			for (int n = 0; n < 256; n++) {
-				uint64_t part = n;
-				for (int j = 0; j < 8; j++) {
-					if (part & 1) {
-						part = (part >> 1) ^ POLY64REV;
-					} else {
-						part >>= 1;
-					}
-				}
-				CRCTable[0][n] = part;
-			}
-
-			// Generate nested CRC table for slice-by-8 lookup
-			for (int n = 0; n < 256; n++) {
-				crc = CRCTable[0][n];
-				for (int k = 1; k < 8; k++) {
-					crc = CRCTable[0][crc & 0xff] ^ (crc >> 8);
-					CRCTable[k][n] = crc;
-				}
-			}
-			init = true;
-		}
-	}
-
 	uint64_t
 	Digest::CRC::crc64(const void *p, size_t len)
 	{
-		init_crc64_table();
-		const unsigned char *next = static_cast<const unsigned char *>(p);
-		uint64_t crc = 0;
-
-		// Process individual bytes until we reach an 8-byte aligned pointer
-		while (len && (reinterpret_cast<uintptr_t>(next) & 7) != 0) {
-			crc = CRCTable[0][(crc ^ *next++) & 0xff] ^ (crc >> 8);
-			len--;
-		}
-
-		// Fast middle processing, 8 bytes (aligned!) per loop
-		while (len >= 8) {
-			crc ^= *(reinterpret_cast< const uint64_t *>(next));
-			crc = CRCTable[7][crc & 0xff] ^
-				  CRCTable[6][(crc >> 8) & 0xff] ^
-				  CRCTable[5][(crc >> 16) & 0xff] ^
-				  CRCTable[4][(crc >> 24) & 0xff] ^
-				  CRCTable[3][(crc >> 32) & 0xff] ^
-				  CRCTable[2][(crc >> 40) & 0xff] ^
-				  CRCTable[1][(crc >> 48) & 0xff] ^
-				  CRCTable[0][crc >> 56];
-			next += 8;
-			len -= 8;
-		}
-
-		// Process remaining bytes (can't be larger than 8)
-		while (len) {
-			crc = CRCTable[0][(crc ^ *next++) & 0xff] ^ (crc >> 8);
-			len--;
-		}
-
-		return crc;
+		return XXH64(p, len, 0);
 	}
 
 
diff --git a/makeflags b/makeflags
index c5b69518..85349bfb 100644
--- a/makeflags
+++ b/makeflags
@@ -1,5 +1,5 @@
 # Default:
-CCFLAGS = -Wall -Wextra -Werror -O3
+CCFLAGS = -Wall -Wextra -Werror -march=native -O3 -fgraphite-identity -floop-nest-optimize
 
 # Optimized:
 # CCFLAGS = -Wall -Wextra -Werror -O3 -march=native
diff --git a/src/Makefile b/src/Makefile
index 90cbaad9..a86f240c 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -7,7 +7,7 @@ all: $(BEES) $(PROGRAMS)
 
 include ../makeflags
 
-LIBS = -lcrucible -luuid -lpthread
+LIBS = -lcrucible -luuid -lpthread -lxxhash
 BEES_LDFLAGS = -L../lib $(LDFLAGS)
 
 BEES_OBJS = \
diff --git a/test/Makefile b/test/Makefile
index 94d13319..b4dee82d 100644
--- a/test/Makefile
+++ b/test/Makefile
@@ -15,7 +15,7 @@ FORCE:
 
 include ../makeflags
 
-LIBS = -lcrucible -lpthread
+LIBS = -lcrucible -lpthread -lxxhash
 BEES_LDFLAGS = -L../lib $(LDFLAGS)
 
 .depends:
diff --git a/test/crc64.cc b/test/crc64.cc
index e2207a20..a8e180a6 100644
--- a/test/crc64.cc
+++ b/test/crc64.cc
@@ -9,12 +9,12 @@ static
 void
 test_getcrc64_byte_arrays()
 {
-	assert(Digest::CRC::crc64("John", 4) == 5942451273432301568);
-	assert(Digest::CRC::crc64("Paul", 4) == 5838402100630913024);
-	assert(Digest::CRC::crc64("George", 6) == 6714394476893704192);
-	assert(Digest::CRC::crc64("Ringo", 5) == 6038837226071130112);
-	assert(Digest::CRC::crc64("", 0) == 0);
-	assert(Digest::CRC::crc64("\377\277\300\200", 4) == 15615382887346470912ULL);
+	assert(Digest::CRC::crc64("John", 4) == 0x46034394ee588447ULL);
+	assert(Digest::CRC::crc64("Paul", 4) == 0xa3c9fd9dff86779aULL);
+	assert(Digest::CRC::crc64("George", 6) == 0x88290fd774650a6aULL);
+	assert(Digest::CRC::crc64("Ringo", 5) == 0xb8cf4b3e794e8447ULL);
+	assert(Digest::CRC::crc64("", 0) == 0xef46db3751d8e999ULL);
+	assert(Digest::CRC::crc64("\xff\xbf\xc0\x80", 4) == 0xa27779a498caa211ULL);
 }
 
 int
